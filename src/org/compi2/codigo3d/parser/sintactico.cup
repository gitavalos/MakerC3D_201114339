package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D IGUAL,DIFERENTE,MAYOR,MENOR,MAYOR_IGUAL,MENOR_IGUAL;
terminal TokenC3D AND,OR,NOT;

nonterminal NodoC3D inicial, expresion,relacional,cond;
nonterminal String op_relacional;

precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 
precedence left IGUAL,DIFERENTE,MAYOR,MENOR,MAYOR_IGUAL,MENOR_IGUAL;
precedence left OR;
precedence left AND;
precedence left NOT;


start with inicial;

inicial::= 
        {: ControlC3D.reiniciar(); :} cond:con 
        {: 
            if(con.getEtqv()!=""){
            ControlC3D.agregarC3D("//Etiqueta(S) de verdadero: " + con.getEtqv() + "\n");
            ControlC3D.agregarC3D("//Etiqueta(S) de falso: " + con.getEtqf());
            }else{
            ControlC3D.agregarC3D("//Ultimo valor: " + con.getCad());
            }
            RESULT = con;
        :}
;
cond::=cond:izq  OR {:String c3d=izq.getEtqf() + ":" + "\n"; ControlC3D.agregarC3D(c3d); :} cond:der
        {:
            String lv =izq.getEtqv() + " , " + der.getEtqv() + " ";
            String lf =der.getEtqf();
            RESULT = new NodoC3D(lv,lf); 
       :}
|cond:izq  AND {:String c3d=izq.getEtqv() + ":" + "\n"; ControlC3D.agregarC3D(c3d); :} cond:der
        {: 
            String lv = der.getEtqv();
            String lf =izq.getEtqf() + " , " +der.getEtqf() + " ";
            RESULT = new NodoC3D(lv,lf); 
        :}
|NOT cond:izq
        {: 
            String lv =izq.getEtqf();
            String lf =izq.getEtqv();
            RESULT = new NodoC3D(lv,lf);
        :}
|relacional:rel
        {:
            RESULT = rel;
        :}
;
relacional::=expresion:izq op_relacional:op expresion:der
        {: 
            String lv =ControlC3D.generaEtq();
            String lf =ControlC3D.generaEtq();
            String c3d="if (" + izq.getCad() + op + der.getCad() + ") goto" + lv + " \n";
            c3d+="goto" + lf + " \n";
            ControlC3D.agregarC3D(c3d);
            RESULT = new NodoC3D(lv,lf); 
        :}
     
|expresion:exp
        {:
            RESULT = exp;
        :}
;

op_relacional::=IGUAL:cad
                    {: RESULT = " == "; :}
    |MAYOR:cad
                   {: RESULT = " > "; :}
 
    |MENOR:cad
                   {: RESULT = " < "; :}
 
    |DIFERENTE:cad                   
                    {: RESULT = " != "; :}
 
    |MAYOR_IGUAL:cad
                    {: RESULT = " >= " ;:}
 
    |MENOR_IGUAL:cad
                   {: RESULT = " <= "; :}
;

expresion::= expresion:izq MAS expresion:der
    {: 
        String temp = ControlC3D.generaTemp();
        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
        ControlC3D.agregarC3D(c3d);
        RESULT = new NodoC3D(temp); 
    :}
|expresion:izq MENOS expresion:der
    {: 
        String temp = ControlC3D.generaTemp();
        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
        ControlC3D.agregarC3D(c3d);
        RESULT = new NodoC3D(temp); 
    :}
|expresion:izq MULT expresion:der
    {: 
        String temp = ControlC3D.generaTemp();
        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
        ControlC3D.agregarC3D(c3d);
        RESULT = new NodoC3D(temp); 
    :}
|expresion:izq DIV expresion:der
    {: 
        String temp = ControlC3D.generaTemp();
        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
        ControlC3D.agregarC3D(c3d);
        RESULT = new NodoC3D(temp); 
    :}
|expresion:izq POT expresion:der
    {: 
        String temp = ControlC3D.generaTemp();
        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
        ControlC3D.agregarC3D(c3d);
        RESULT = new NodoC3D(temp); 
    :}
|MENOS expresion:exp 
    {: 
        String temp = ControlC3D.generaTemp();
        String c3d = temp + " = - " + exp.getCad() + ";\n";
        ControlC3D.agregarC3D(c3d);
        RESULT = new NodoC3D(temp); 
    :}
|PAR_IZQ cond:cond PAR_DER   
    {: RESULT = cond; :}
|ID:id           
    {: RESULT = new NodoC3D(id); :}
|ENTERO:entero   
    {: RESULT = new NodoC3D(entero); :}
|DECIMAL:decimal 
    {: RESULT = new NodoC3D(decimal); :}
;